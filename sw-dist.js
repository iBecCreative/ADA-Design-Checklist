const version="v1.40::",staticCacheName="v1.40::static",pagesCacheName="v1.40::pages",offlinePages=["/"];function updateStaticCache(){return caches.open("v1.40::static").then(e=>e.addAll(["/","/_include/js/main.min.js","/_include/css/main.min.css","/offline.html","/404.html"]))}function stashInCache(e,t,a){caches.open(e).then(e=>e.put(t,a))}function clearOldCaches(){return caches.keys().then(e=>Promise.all(e.filter(e=>0!==e.indexOf(version)).map(e=>caches.delete(e))))}self.addEventListener("install",e=>{e.waitUntil(updateStaticCache().then(()=>self.skipWaiting()))}),self.addEventListener("activate",e=>{e.waitUntil(clearOldCaches().then(()=>self.clients.claim()))}),self.addEventListener("fetch",e=>{let t=e.request,a=new URL(t.url);"GET"===t.method&&(-1===t.headers.get("Accept").indexOf("text/html")?e.respondWith(caches.match(t).then(e=>e||fetch(t).then(e=>e))):e.respondWith(fetch(t).then(e=>{let n=e.clone();return offlinePages.includes(a.pathname)||offlinePages.includes(a.pathname+"/")?stashInCache("v1.40::static",t,n):stashInCache("v1.40::pages",t,n),e}).catch(()=>caches.match(t).then(e=>e||caches.match("/offline.html")))))});